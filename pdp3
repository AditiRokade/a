import re

def glue_dynamic_frame_with_partition_pushdown(
    glueContext,
    database,
    table,
    s3_paths,
    partition_indexes=None  # 1-based indexes, if None uses all partitions
):
    """
    Create a Glue DynamicFrame with partition predicate pushdown based on S3 path list.

    Args:
        glueContext: AWS GlueContext object.
        database (str): Glue database name.
        table (str): Glue table name.
        s3_paths (list[str]): List of S3 partitioned paths.
        partition_indexes (list[int], optional): 1-based indexes of partitions to use. If None all partitions are used.

    Returns:
        DynamicFrame filtered by partition predicates.
    """

    def extract_partitions(path):
        # Extract key=value pairs case insensitive from path
        parts = re.findall(r'([^/]+)/?', path.lower())
        kv_pairs = [p for p in parts if '=' in p]
        return kv_pairs

    predicates_list = []
    for path in s3_paths:
        kvs = extract_partitions(path)
        if partition_indexes:
            selected = [kvs[i - 1] for i in partition_indexes if 0 < i <= len(kvs)]
        else:
            selected = kvs
        predicates_list.append(selected)

    # Build OR-ed clauses
    or_clauses = []
    for pred in predicates_list:
        and_clauses = []
        for kv in pred:
            key, val = kv.split('=', 1)
            key = key.strip()
            val = val.strip()
            # Partition key names in Glue are case-insensitive
            and_clauses.append(f"{key} = '{val}'")
        if and_clauses:
            or_clauses.append(' AND '.join(and_clauses))

    if or_clauses:
        push_down_predicate = ' OR '.join([f"({x})" for x in or_clauses])
    else:
        push_down_predicate = None

    # Read DynamicFrame with push_down_predicate
    if push_down_predicate:
        dynamic_frame = glueContext.create_dynamic_frame.from_catalog(
            database=database,
            table_name=table,
            push_down_predicate=push_down_predicate
        )
    else:
        dynamic_frame = glueContext.create_dynamic_frame.from_catalog(
            database=database,
            table_name=table
        )

    return dynamic_frame


# Usage example in Glue ETL:
s3_paths_example = [
    "s3://stg/mps/it_id=39/loan=py_tm/year=2025/month=9/day=7/",
    "s3://stg/mps/it_id=bgh/loan=tyop/year=2025/month=9/day=7/"
]
partition_indexes_example = [3, 4, 5]  # For year, month, day

dynamic_frame = glue_dynamic_frame_with_partition_pushdown(
    glueContext=glueContext,
    database='my_database',
    table='my_table',
    s3_paths=s3_paths_example,
    partition_indexes=partition_indexes_example
)

dynamic_frame.show()
