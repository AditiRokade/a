import re
from typing import List, Optional

def gen_partition_pushdown_predicate(
    s3_paths: List[str],
    partition_indexes: Optional[List[int]] = None,
    capital_partitions: bool = False
) -> str:
    """
    Generates a push-down predicate string dynamically from a list of S3 partitioned paths.

    Args:
        s3_paths (List[str]): List of S3 paths containing partition folders like key=value.
        partition_indexes (List[int], optional): 1-based indexes of partitions to filter on. If None, use all.
        capital_partitions (bool): Whether partition keys are capitalized or lowercase.

    Returns:
        str: push-down predicate string with partition filters joined by OR.
    """

    def extract_partitions(path: str) -> List[str]:
        # Extract all key=value parts from path (case insensitive)
        path_lower = path.lower()
        return [p for p in re.findall(r'([^/]+=([^/]+))', path_lower)]

    or_clauses = []

    for path in s3_paths:
        partitions = extract_partitions(path)
        # Filter by 1-based indexes if provided
        if partition_indexes:
            filtered_partitions = [partitions[i-1] for i in partition_indexes if 0 < i <= len(partitions)]
        else:
            filtered_partitions = partitions

        if not filtered_partitions:
            continue

        and_clauses = []
        for full_kv, val in filtered_partitions:
            key, value = full_kv.split('=')
            key = key.upper() if capital_partitions else key.lower()
            and_clauses.append(f"{key} = '{value}'")

        or_clauses.append(f"({' AND '.join(and_clauses)})")

    # Join all filters with OR
    push_down_predicate = " OR ".join(or_clauses) if or_clauses else ""

    return push_down_predicate


# Example use like your original function with s3_paths and partition indexes:
s3_paths_example = [
    "s3://stg/mps/it_id=39/loan=py_tm/year=2025/month=9/day=7/",
    "s3://stg/mps/it_id=bgh/loan=tyop/year=2025/month=9/day=7/"
]
partition_indexes_example = [3,4,5]

pdp_string = gen_partition_pushdown_predicate(
    s3_paths=s3_paths_example,
    partition_indexes=partition_indexes_example,
    capital_partitions=False
)

print(pdp_string)
# Output would look like:
# (year = '2025' AND month = '9' AND day = '7') OR (year = '2025' AND month = '9' AND day = '7')
